use axum::{
    body::Body,
    http::Request,
    middleware::{self, Next},
    response::Response,
};
use std::time::Instant;

pub async fn logging_middleware(req: Request<Body>, next: Next<Body>) -> Response {
    let start = Instant::now();
    let method = req.method().to_string();
    let uri = req.uri().to_string();

    let response = next.run(req).await;

    let duration = start.elapsed();
    println!(
        "{} {} - {}ms - {}",
        method,
        uri,
        duration.as_millis(),
        response.status()
    );

    response
}

pub async fn auth_middleware(req: Request<Body>, next: Next<Body>) -> Response {
    // TODO: Implement authentication logic
    next.run(req).await
}

pub fn apply_middleware(router: Router) -> Router {
    router
        .layer(middleware::from_fn(logging_middleware))
        .layer(middleware::from_fn(auth_middleware))
}
