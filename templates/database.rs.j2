use axum::Extension;
use sqlx::{MySqlPool, mysql::MySqlPoolOptions};
use std::env;

pub async fn create_pool() -> MySqlPool {
    let database_url = env::var("DATABASE_URL")
        .expect("DATABASE_URL must be set");
        
    MySqlPoolOptions::new()
        .max_connections(5)
        .connect(&database_url)
        .await
        .expect("Failed to create database pool")
}

pub async fn get_pool(Extension(pool): Extension<MySqlPool>) -> MySqlPool {
    pool
}

pub async fn migrate(pool: &MySqlPool) {
    sqlx::migrate!()
        .run(pool)
        .await
        .expect("Failed to run database migrations");
}
